{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  constructor() {\n    this.setupAxiosInterceptorsJwt = token => {\n      axios.interceptors.request.use(config => {\n        if (this.isUserLoggedIn()) config.headers.authorization = this.createJwtAuthentication(token);\n        return config;\n      });\n    };\n  }\n\n  executeJwtAuthentication(username, password) {\n    return axios.post('http://localhost:8034/customer2/authenticate2', {\n      username,\n      password\n    });\n  }\n\n  registerSuccessfullLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(username, password);\n  }\n\n  registerSuccessfullLoginJwt(username, token, password, remember) {\n    sessionStorage.setItem('authenticatedUser', username);\n    sessionStorage.setItem('authenticatedPassword', password);\n    localStorage.setItem('token', token);\n\n    if (remember) {\n      const cookies = new Cookies();\n      cookies.set('userName', username);\n      cookies.set('pass', password);\n      cookies.set('rememberInfo', token);\n    }\n\n    this.setupAxiosInterceptorsJwt(token);\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('authenticatedUser');\n    if (user === null) return false;\n    return true;\n  }\n\n  setupAxiosInterceptorsForSavedToken() {\n    if (this.isUserLoggedIn()) this.setupAxiosInterceptorsJwt(localStorage.getItem('token'));\n  }\n\n  createJwtAuthentication(token) {\n    return 'Bearer ' + token;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/Asus/Desktop/uygulama/customer-app-fe/src/components/onlinefood/AuthenticationService.js"],"names":["axios","AuthenticationService","setupAxiosInterceptorsJwt","token","interceptors","request","use","config","isUserLoggedIn","headers","authorization","createJwtAuthentication","executeJwtAuthentication","username","password","post","registerSuccessfullLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfullLoginJwt","remember","localStorage","cookies","Cookies","set","logout","removeItem","user","getItem","setupAxiosInterceptorsForSavedToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAAA;AAAA,SAmCvBC,yBAnCuB,GAmCMC,KAAD,IAAU;AAClCH,MAAAA,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAU;AACrC,YAAG,KAAKC,cAAL,EAAH,EACID,MAAM,CAACE,OAAP,CAAeC,aAAf,GAA+B,KAAKC,uBAAL,CAA6BR,KAA7B,CAA/B;AACJ,eAAOI,MAAP;AACH,OAJD;AAKH,KAzCsB;AAAA;;AACvBK,EAAAA,wBAAwB,CAACC,QAAD,EAAUC,QAAV,EAAmB;AACvC,WAAOd,KAAK,CAACe,IAAN,CAAW,+CAAX,EAA2D;AAACF,MAAAA,QAAD;AAAUC,MAAAA;AAAV,KAA3D,CAAP;AACH;;AAEDE,EAAAA,wBAAwB,CAACH,QAAD,EAAWC,QAAX,EAAqB;AACzCG,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA4CL,QAA5C;AACA,SAAKM,sBAAL,CAA4BN,QAA5B,EAAsCC,QAAtC;AACH;;AAEDM,EAAAA,2BAA2B,CAACP,QAAD,EAAUV,KAAV,EAAiBW,QAAjB,EAA2BO,QAA3B,EAAoC;AAC3DJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CL,QAA3C;AACAI,IAAAA,cAAc,CAACC,OAAf,CAAuB,uBAAvB,EAAgDJ,QAAhD;AACAQ,IAAAA,YAAY,CAACJ,OAAb,CAAqB,OAArB,EAA6Bf,KAA7B;;AAEA,QAAIkB,QAAJ,EAAc;AACV,YAAME,OAAO,GAAG,IAAIC,OAAJ,EAAhB;AACAD,MAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwBZ,QAAxB;AACAU,MAAAA,OAAO,CAACE,GAAR,CAAY,MAAZ,EAAoBX,QAApB;AACAS,MAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4BtB,KAA5B;AACH;;AACD,SAAKD,yBAAL,CAA+BC,KAA/B;AACH;;AAEDuB,EAAAA,MAAM,GAAE;AACJT,IAAAA,cAAc,CAACU,UAAf,CAA0B,mBAA1B;AACH;;AAEDnB,EAAAA,cAAc,GAAE;AACZ,QAAIoB,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAK,IAAZ,EAAkB,OAAO,KAAP;AAClB,WAAO,IAAP;AACH;;AAWDE,EAAAA,mCAAmC,GAAE;AAC7B,QAAG,KAAKtB,cAAL,EAAH,EACI,KAAKN,yBAAL,CAA+BoB,YAAY,CAACO,OAAb,CAAqB,OAArB,CAA/B;AACX;;AAEDlB,EAAAA,uBAAuB,CAACR,KAAD,EAAO;AAC1B,WAAO,YAAWA,KAAlB;AACH;;AAlDsB;;AAqD3B,eAAe,IAAIF,qBAAJ,EAAf","sourcesContent":["import axios from 'axios';\n\nclass AuthenticationService{\n    executeJwtAuthentication(username,password){\n        return axios.post('http://localhost:8034/customer2/authenticate2',{username,password});\n    };\n\n    registerSuccessfullLogin(username, password) {\n        sessionStorage.setItem('authenticatedUser', username);\n        this.setupAxiosInterceptors(username, password);\n    }\n\n    registerSuccessfullLoginJwt(username,token, password, remember){\n        sessionStorage.setItem('authenticatedUser',username);\n        sessionStorage.setItem('authenticatedPassword', password);\n        localStorage.setItem('token',token);\n\n        if (remember) {\n            const cookies = new Cookies();\n            cookies.set('userName', username);\n            cookies.set('pass', password);\n            cookies.set('rememberInfo', token);\n        }\n        this.setupAxiosInterceptorsJwt(token);\n    }\n\n    logout(){\n        sessionStorage.removeItem('authenticatedUser');\n    }\n\n    isUserLoggedIn(){\n        let user = sessionStorage.getItem('authenticatedUser');\n        if(user === null) return false;\n        return true;\n    }\n\n\n    setupAxiosInterceptorsJwt = (token) =>{\n        axios.interceptors.request.use((config)=>{\n            if(this.isUserLoggedIn())\n                config.headers.authorization = this.createJwtAuthentication(token);\n            return config;\n        })\n    }\n\n    setupAxiosInterceptorsForSavedToken(){\n            if(this.isUserLoggedIn())\n                this.setupAxiosInterceptorsJwt(localStorage.getItem('token'));\n    }\n\n    createJwtAuthentication(token){\n        return 'Bearer '+ token;\n    };\n}\n\nexport default new AuthenticationService()\n"]},"metadata":{},"sourceType":"module"}